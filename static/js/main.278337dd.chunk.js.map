{"version":3,"sources":["serviceWorker.ts","api/todolistApi.ts","components/DefaultComponent/Input/AddItemForm.tsx","components/DefaultComponent/Span/EditableSpan.tsx","bll/reducers/AppReducer.ts","bll/reducers/TaskReducer.ts","utils/error-utils.ts","bll/reducers/TodoListReducer.ts","components/TodoList/Tasks/Task.tsx","components/DefaultComponent/ButtonFilterLine/ButtonFilterLine.tsx","components/TodoList/TodoList.tsx","components/Header/Header.tsx","components/DefaultComponent/ErrorSnackbar/errorSnackBar.tsx","AppWithRedux.tsx","bll/store.ts","index.tsx","components/DefaultComponent/Input/AddItemForm.module.css","components/DefaultComponent/Span/EditableSpan.module.css","components/TodoList/TodoList.module.css"],"names":["Boolean","window","location","hostname","match","RequestResultCode","AddItemForm","React","memo","props","useState","newTitleText","setNewTitleText","errorFil","setErrorFil","addItem","trim","className","classes","cont","TextField","variant","onKeyPress","e","key","onChange","currentTarget","value","error","helperText","sx","minWidth","IconButton","onClick","color","disabled","Add","EditableSpan","title","callBack","textStyle","titleText","setTitleText","editMode","setEditMode","changeItemTitle","autoFocus","onBlur","type","Typography","component","spanStyle","onDoubleClick","flexGrow","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","post","todolistId","delete","put","taskId","param","TaskStatuses","TaskPriorities","initialState","status","setLoadingBarStatusAC","setErrorAC","handleServerAppError","dispatch","data","messages","length","changeTodoListEntityStatusAC","entityStatus","upgradeTaskTC","then","res","resultCode","complete","task","item","catch","massage","finally","Task","useDispatch","ListItem","disablePadding","divider","pl","Checkbox","checked","Completed","New","todoListId","taskForUpdateParam","removeTaskAC","Delete","ButtonFilterLine","filter","filteredTasks","console","log","ButtonGroup","size","Button","TodoList","useEffect","tasks","setTasks","items","tasksToRender","el","arrayOfTasksLi","map","priority","description","deadline","completed","startDate","id","useCallback","val","addTask","addTaskAC","createTaskTC","changeTodoListTitle","changeTodoListTitleAC","changeTodosTitleTC","Paper","padding","margin","position","left","Clear","List","Header","AppBar","Toolbar","style","justifyContent","edge","aria-label","Menu","Alert","forwardRef","ref","elevation","ErrorSnackbar","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","width","AppWithRedux","todoLists","addToDoList","todos","createTodosTC","todoListsComponents","tl","Grid","loadingStatus","LinearProgress","Container","fixed","container","spacing","rootReducer","combineReducers","action","stateCopy","copyState","forEach","newTodoList","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.278337dd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppWithReducer is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\nimport {TodoListType} from \"../bll/reducers/TodoListReducer\";\nimport {TaskPriorities, TaskStatuses, TasksType} from \"../bll/reducers/TaskReducer\";\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"099be23b-024b-4d04-8aea-ded1a22de046\"\n    }\n})\nexport const todolistApi = {\n    //Todos\n    getTodos() {\n        return instance.get<Array<TodoListType>>(\"todo-lists\",)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{ item: TodoListType }>>(\"todo-lists\", {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n    },\n    updateTodolistTitle(todolistId: string, title: string) {\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title})\n    },\n    //Tasks\n    getTasks(todolistId: string) {\n        return instance.get<TasksResponseType<Array<TasksType>>>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{ item: TasksType }>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    upgradeTask(todolistId: string, taskId: string, param: UpdateTaskParamType) {\n        return instance.put<ResponseType<{ item: TasksType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, param)\n    }\n}\n\n\nexport type ResponseType<T> = {\n    fieldsErrors: Array<string>\n    messages: Array<string>\n    order?: number\n    resultCode?: number\n    data: T\n}\n\ntype TasksResponseType<T> = {\n    error: any\n    totalCount: number\n    items: T\n}\n\nexport type UpdateTaskParamType = {\n    title: string\n    description: string\n    completed: boolean\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\nexport enum RequestResultCode {\n    complete,\n    error,\n    captcha = 10\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport classes from './AddItemForm.module.css'\nimport {IconButton, TextField} from \"@mui/material\";\nimport {Add} from \"@mui/icons-material\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n\n    let [newTitleText, setNewTitleText] = useState<string>(\"\")\n    let [errorFil, setErrorFil] = useState(\"\")\n\n    const changeTitleVal = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTitleText(e.currentTarget.value)\n        setErrorFil(\"\")\n    }\n\n    const addItem = () => {\n        if (newTitleText.trim()) {\n            props.addItem(newTitleText.trim())\n            setNewTitleText(\"\")\n            setErrorFil(\"\")\n        } else {\n            setErrorFil(\"Incorrect value\")\n            return\n        }\n    }\n\n    const keyAdd = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n\n    return (\n        <div className={classes.cont}>\n            <TextField variant={\"standard\"}\n                       onKeyPress={keyAdd}\n                       onChange={changeTitleVal}\n                       value={newTitleText}\n                       error={!!errorFil}\n                       helperText={errorFil}\n                       sx={{ minWidth: \"198px\"}}\n            />\n            <IconButton onClick={addItem} color={\"primary\"} disabled={props.disabled}>\n                <Add/>\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\nimport classes from \"./EditableSpan.module.css\"\nimport {TextField, Typography} from \"@mui/material\";\n\ntype textStyleType =\n    \"h1\"\n    | \"h2\"\n    | \"h3\"\n    | \"h4\"\n    | \"h5\"\n    | \"h6\"\n    | \"subtitle1\"\n    | \"subtitle2\"\n    | \"body1\"\n    | \"body2\"\n    | \"caption\"\n    | \"button\"\n    | \"overline\"\n    | \"inherit\"\n    | undefined\n\ntype EditableSpanPropsType = {\n    title: string\n    callBack: (title: string) => void\n    textStyle?: textStyleType\n}\n\nexport const EditableSpan = React.memo(({title, callBack, textStyle}: EditableSpanPropsType) => {\n\n    let [titleText, setTitleText] = useState<string>(title)\n    const changeTitleVal = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitleText(e.currentTarget.value)\n    }\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => setEditMode(false)\n\n    const changeItemTitle = () => {\n        callBack(titleText)\n        offEditMode()\n    }\n    const keyAdd = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            changeItemTitle()\n        }\n    }\n    return (\n        <>\n            {!editMode\n                ? <Typography\n                    variant={textStyle}\n                    component={\"span\"}\n                    className={classes.spanStyle}\n                    onDoubleClick={onEditMode}\n                    sx={{flexGrow: 1}}\n                >\n                   {title}\n                </Typography>\n                : <TextField autoFocus\n                             variant={\"standard\"}\n                             onKeyPress={keyAdd}\n                             onChange={changeTitleVal}\n                             onBlur={changeItemTitle} type=\"text\"\n                             value={titleText}/>\n            }\n        </>\n    )\n})\n\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n    status: 'idle' as RequestStatusType,\n    error: null as string | null\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case \"APP/SET-ERROR\":\n            return {\n                ...state,\n                error: action.error\n            }\n        default:\n            return state\n    }\n}\n\ntype AppActionsType = SetLoadingBarStatusAT | SetErrorAT\n\nexport type SetLoadingBarStatusAT = ReturnType<typeof setLoadingBarStatusAC>\nexport const setLoadingBarStatusAC = (status: RequestStatusType) => {\n    return{\n        type: 'APP/SET-STATUS',\n        status\n    } as const\n}\n\nexport type SetErrorAT = ReturnType<typeof setErrorAC>\nexport const setErrorAC = (error: string | null) => {\n    return {\n        type: \"APP/SET-ERROR\",\n        error\n    } as const\n}","import {\n    AddTodoListAT,\n    changeTodoListEntityStatusAC,\n    ChangeTodoListEntityStatusAT,\n    RemoveTodoListAT,\n    SetTodoListsAT,\n} from \"./TodoListReducer\";\nimport {Dispatch} from \"redux\";\nimport {RequestResultCode, todolistApi, UpdateTaskParamType} from \"../../api/todolistApi\";\nimport {setErrorAC, SetErrorAT, setLoadingBarStatusAC, SetLoadingBarStatusAT} from \"./AppReducer\";\nimport {handleServerAppError} from \"../../utils/error-utils\";\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress,\n    Completed,\n    Draft\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle,\n    Hi,\n    Urgent,\n    Later\n}\n\nexport type TasksType = {\n    description: string\n    title: string\n    completed: boolean\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TasksType>\n}\n\nexport type ActionsType =\n    removeTaskAT\n    | addTaskAT\n    | ChangeTaskStatusAT\n    | ChangeTaskTitleAT\n    | AddTodoListAT\n    | RemoveTodoListAT\n    | SetTodoListsAT\n    | SetTasksAT\n    | SetLoadingBarStatusAT\n    | SetErrorAT\n    | ChangeTodoListEntityStatusAT\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASK\":\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId]\n                    .filter(el => el.id !== action.taskId)\n            }\n        case \"ADD-TASK\":\n            return {\n                ...state,\n                [action.todolistId]: [\n                    action.task,\n                    ...state[action.todolistId]\n                ],\n            }\n        case \"CHANGE-TASK-STATUS\":\n        case \"CHANGE-TASK-TITLE\":\n            return {\n                ...state,\n                [action.task.todoListId]: state[action.task.todoListId]\n                    .map(el => el.id === action.task.id ? action.task : el)\n            }\n        case \"ADD-TODOLIST\":\n            return {\n                ...state,\n                [action.todos.id]: []\n            }\n        case \"REMOVE-TODOLIST\":\n            const stateCopy = {...state}\n            delete stateCopy[action.todoListId]\n            return stateCopy\n        case \"SET-TODOLISTS\": {\n            const copyState = {...state}\n            action.todos.forEach(el => {\n                copyState[el.id] = []\n            })\n            return copyState\n        }\n        case \"SET-TASKS\":\n            const copyState = {...state}\n            copyState[action.todolistId] = action.tasks\n            return copyState\n        default:\n            return state\n    }\n}\n\ntype removeTaskAT = ReturnType<typeof removeTaskAC>\nexport const removeTaskAC = (todoListId: string, taskId: string) => {\n    return {\n        type: \"REMOVE-TASK\",\n        taskId,\n        todoListId,\n    } as const\n}\n\ntype addTaskAT = ReturnType<typeof addTaskAC>\nexport const addTaskAC = (todolistId: string, task: TasksType) => {\n    return {\n        type: \"ADD-TASK\",\n        todolistId,\n        task\n    } as const\n}\n\ntype ChangeTaskStatusAT = ReturnType<typeof changeTaskStatusAC>\nexport const changeTaskStatusAC = (task: TasksType) => {\n    return {\n        type: \"CHANGE-TASK-STATUS\",\n        task\n    } as const\n}\n\ntype ChangeTaskTitleAT = ReturnType<typeof changeTaskTitleAC>\nexport const changeTaskTitleAC = (task: TasksType) => {\n    return {\n        type: \"CHANGE-TASK-TITLE\",\n        task\n    } as const\n}\n\nexport type SetTasksAT = ReturnType<typeof setTasks>\nexport const setTasks = (todolistId: string, tasks: TasksType[]) => {\n    return {\n        type: \"SET-TASKS\",\n        tasks,\n        todolistId\n    } as const\n}\n\n//THUNK\n\n\nexport const setTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingBarStatusAC(\"loading\"))\n\n    todolistApi.getTasks(todolistId)\n        .then(res => {\n            dispatch(setTasks(todolistId, res.data.items))\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC(\"idle\"))\n        })\n}\n\nexport const createTaskTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingBarStatusAC(\"loading\"))\n    dispatch(changeTodoListEntityStatusAC(todolistId, \"loading\"))\n\n    todolistApi.createTask(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(addTaskAC(todolistId, res.data.data.item))\n            } else {\n                handleServerAppError<{ item: TasksType}>(dispatch, res.data)\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC(\"idle\"))\n            dispatch(changeTodoListEntityStatusAC(todolistId, \"idle\"))\n        })\n}\n\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingBarStatusAC(\"loading\"))\n    dispatch(changeTodoListEntityStatusAC(todolistId, \"loading\"))\n\n    todolistApi.deleteTask(todolistId, taskId)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(removeTaskAC(todolistId, taskId))\n            } else {\n                handleServerAppError(dispatch, res.data)\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC(\"idle\"))\n            dispatch(changeTodoListEntityStatusAC(todolistId, \"idle\"))\n        })\n}\n\nexport const upgradeTaskTC = (todolistId: string, taskId: string, param: UpdateTaskParamType) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingBarStatusAC(\"loading\"))\n    todolistApi.upgradeTask(todolistId, taskId, param)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(changeTaskTitleAC(res.data.data.item))\n            } else {\n                handleServerAppError<{ item: TasksType}>(dispatch, res.data)\n            }\n\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC(\"idle\"))\n        })\n}","import {setErrorAC} from \"../bll/reducers/AppReducer\";\nimport {Dispatch} from \"redux\";\nimport {ResponseType} from \"../api/todolistApi\";\n\n\nexport const handleServerAppError = <T>(dispatch: Dispatch<any>, data: ResponseType<T>) => {\n    if (data.messages.length) {\n        dispatch(setErrorAC(data.messages[0]))\n    } else {\n        dispatch(setErrorAC(\"Some error occured\"))\n    }\n}","import {Dispatch} from \"redux\";\nimport {RequestResultCode, todolistApi} from \"../../api/todolistApi\";\nimport {RequestStatusType, setErrorAC, SetErrorAT, setLoadingBarStatusAC, SetLoadingBarStatusAT} from \"./AppReducer\";\nimport {handleServerAppError} from \"../../utils/error-utils\";\n\n\nexport type ActionsType =\n    RemoveTodoListAT\n    | AddTodoListAT\n    | ChangeTodoListTitleAT\n    | FilterTodoListAT\n    | SetTodoListsAT\n    | ChangeTodoListEntityStatusAT\n    | SetLoadingBarStatusAT\n    | SetErrorAT\n\nconst initialState: Array<TodoListDomainType> = []\n\n\nexport type TodoListType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type FilterTasksType = \"all\" | \"active\" | \"completed\"\n\nexport type TodoListDomainType = TodoListType & {\n    filter: FilterTasksType\n    entityStatus: RequestStatusType\n}\n\nexport const todoListReducer = (state: Array<TodoListDomainType> = initialState, action: ActionsType): Array<TodoListDomainType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(tl => tl.id !== action.todoListId)\n        case \"ADD-TODOLIST\":\n            let newTodoList: TodoListDomainType = {...action.todos, filter: \"all\", entityStatus: \"idle\"}\n            return [newTodoList, ...state]\n        case \"CHANGE-TODOLIST-TITLE\":\n            return state.map(el => el.id === action.todolistId ? {...el, title: action.title} : el)\n        case \"CHANGE-TODOLIST-FILTER\":\n            return state.map(el => el.id === action.id ? {...el, filter: action.filter} : el)\n        case \"SET-TODOLISTS\":\n            let todos: TodoListDomainType[] = action.todos.map(el => ({...el, filter: \"all\", entityStatus: \"idle\"}))\n            return [\n                ...state,\n                ...todos\n            ]\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\n            return state.map(el => el.id === action.todolistId ? {...el, entityStatus: action.entityStatus} : el)\n        default:\n            return state\n    }\n}\n\nexport type RemoveTodoListAT = ReturnType<typeof removeTodoListAC>\nexport const removeTodoListAC = (todoListId: string) => {\n    return {\n        type: \"REMOVE-TODOLIST\",\n        todoListId\n    } as const\n}\n\nexport type AddTodoListAT = ReturnType<typeof addTodolistAC>\nexport const addTodolistAC = (todos: TodoListType) => {\n    return {\n        type: \"ADD-TODOLIST\",\n        todos,\n    } as const\n}\n\ntype ChangeTodoListTitleAT = ReturnType<typeof changeTodoListTitleAC>\nexport const changeTodoListTitleAC = (todolistId: string, title: string) => {\n    return {\n        type: \"CHANGE-TODOLIST-TITLE\",\n        title,\n        todolistId\n    } as const\n}\n\ntype FilterTodoListAT = ReturnType<typeof filterTodoListAC>\nexport const filterTodoListAC = (filter: FilterTasksType, id: string) => {\n    return {\n        type: \"CHANGE-TODOLIST-FILTER\",\n        filter,\n        id\n    } as const\n}\n\nexport type SetTodoListsAT = ReturnType<typeof setTodoListsAC>\nexport const setTodoListsAC = (todos: TodoListType[]) => {\n    return {\n        type: \"SET-TODOLISTS\",\n        todos\n    } as const\n}\n\nexport type ChangeTodoListEntityStatusAT = ReturnType<typeof changeTodoListEntityStatusAC>\nexport const changeTodoListEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) => {\n    return {\n        type: \"CHANGE-TODOLIST-ENTITY-STATUS\",\n        todolistId,\n        entityStatus\n    } as const\n}\n\n//THUNK\n\nexport const setTodosTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingBarStatusAC(\"loading\"))\n    todolistApi.getTodos()\n        .then(res => {\n            dispatch(setTodoListsAC(res.data))\n\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC(\"idle\"))\n        })\n}\n\nexport const createTodosTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingBarStatusAC(\"loading\"))\n\n    todolistApi.createTodolist(title)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(addTodolistAC(res.data.data.item))\n            } else {\n                handleServerAppError<{ item: TodoListType }>(dispatch, res.data)\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC(\"idle\"))\n        })\n}\n\nexport const deleteTodosTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingBarStatusAC(\"loading\"))\n    dispatch(changeTodoListEntityStatusAC(todolistId, \"loading\"))\n\n    todolistApi.deleteTodolist(todolistId)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(removeTodoListAC(todolistId))\n                dispatch(changeTodoListEntityStatusAC(todolistId, \"idle\"))\n            } else {\n                handleServerAppError(dispatch, res.data)\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC(\"idle\"))\n        })\n}\n\nexport const changeTodosTitleTC = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingBarStatusAC(\"loading\"))\n    todolistApi.updateTodolistTitle(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(changeTodoListTitleAC(todolistId, title))\n            } else {\n                handleServerAppError(dispatch, res.data)\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC(\"idle\"))\n        })\n}\n\n","import React, {ChangeEvent} from \"react\"\nimport {Checkbox, IconButton, ListItem} from \"@mui/material\";\nimport classes from \"../TodoList.module.css\";\nimport {EditableSpan} from \"../../DefaultComponent/Span/EditableSpan\";\nimport {Delete} from \"@mui/icons-material\";\nimport {useDispatch} from \"react-redux\";\nimport {deleteTaskTC, TaskStatuses, upgradeTaskTC} from \"../../../bll/reducers/TaskReducer\";\nimport {UpdateTaskParamType} from \"../../../api/todolistApi\";\n\ntype TasksPropsType = {\n    taskId: string\n    todoListId: string\n    status: TaskStatuses\n    title: string\n    taskForUpdateParam: UpdateTaskParamType\n}\n\nexport const Task = React.memo((props: TasksPropsType) => {\n\n    const dispatch = useDispatch()\n\n    const removeTask = () => dispatch(deleteTaskTC(props.todoListId, props.taskId))\n\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        let checked = e.currentTarget.checked\n        let status = checked ? TaskStatuses.Completed : TaskStatuses.New\n        dispatch(upgradeTaskTC(props.todoListId, props.taskId, {...props.taskForUpdateParam, status}))\n    }\n\n    const changeTaskTitle = (title: string) => {\n        dispatch(upgradeTaskTC(props.todoListId, props.taskId, {...props.taskForUpdateParam, title}))\n    }\n    return (\n        // Task\n        <ListItem key={props.taskId}\n                  className={`${props.status ? classes.status : \"\"}`}\n                  disablePadding\n                  divider\n                  sx={{pl: \"16px\"}}\n        >\n\n            <Checkbox onChange={changeTaskStatus}\n                      checked={props.status === TaskStatuses.Completed}\n            />\n            <EditableSpan title={props.title} callBack={changeTaskTitle}/>\n            <IconButton onClick={removeTask}>\n                <Delete/>\n            </IconButton>\n        </ListItem>\n    )\n})","import React from \"react\";\nimport {Button, ButtonGroup} from \"@mui/material\";\nimport {FilterTasksType} from \"../../../bll/reducers/TodoListReducer\";\n\n\ntype ButtonFilterLine = {\n    filter: FilterTasksType\n    filteredTasks: (val: FilterTasksType) => void\n}\n\nexport const ButtonFilterLine = React.memo(({filter, filteredTasks}: ButtonFilterLine) => {\n    console.log(\"ButtonFilterLine\")\n\n    return (\n\n        <ButtonGroup size={\"small\"} variant={\"outlined\"}>\n            <Button\n                color={filter === \"all\" ? \"secondary\" : \"primary\"}\n                onClick={() => filteredTasks(\"all\")}\n            >\n                All\n            </Button>\n            <Button\n                color={filter === \"active\" ? \"secondary\" : \"primary\"}\n                onClick={() => filteredTasks(\"active\")}\n            >\n                Active\n            </Button>\n            <Button\n                color={filter === \"completed\" ? \"secondary\" : \"primary\"}\n                onClick={() => filteredTasks(\"completed\")}\n            >\n                Completed\n            </Button>\n        </ButtonGroup>\n    );\n})\n","import React, {useCallback, useEffect} from \"react\";\nimport {AddItemForm} from \"../DefaultComponent/Input/AddItemForm\";\nimport {EditableSpan} from \"../DefaultComponent/Span/EditableSpan\";\nimport {IconButton, List, Paper} from \"@mui/material\";\nimport {Clear} from \"@mui/icons-material\";\nimport {Task} from \"./Tasks/Task\";\nimport {useDispatch} from \"react-redux\";\nimport {\n    changeTodosTitleTC,\n    deleteTodosTC,\n    FilterTasksType,\n    filterTodoListAC,\n} from \"../../bll/reducers/TodoListReducer\";\nimport {createTaskTC, setTasksTC, TaskStatuses, TasksType} from \"../../bll/reducers/TaskReducer\";\nimport {ButtonFilterLine} from \"../DefaultComponent/ButtonFilterLine/ButtonFilterLine\";\nimport {UpdateTaskParamType} from \"../../api/todolistApi\";\nimport {RequestStatusType} from \"../../bll/reducers/AppReducer\";\n\n\ntype TodoListPropsType = {\n    todoListId: string\n    title: string\n    tasks: Array<TasksType>\n    filter: FilterTasksType\n    entityStatus: RequestStatusType\n}\n\nexport const TodoList = React.memo((props: TodoListPropsType) => {\n    console.log(\"TODOLIST\")\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setTasksTC(props.todoListId))\n    }, [dispatch, props.todoListId])\n\n    //Filter tasks\n    let tasksToRender = props.tasks\n    if (props.filter === \"active\") {\n        tasksToRender = props.tasks.filter(el => el.status === TaskStatuses.New)\n    }\n    if (props.filter === \"completed\") {\n        tasksToRender = props.tasks.filter(el => el.status === TaskStatuses.Completed)\n    }\n    //Do Array of jsx Elements TASKS ITEM\n    const arrayOfTasksLi = tasksToRender.map(el => {\n            //Task Param to Update\n            let taskForUpdateParam: UpdateTaskParamType = {\n                title: el.title,\n                status: el.status,\n                priority: el.priority,\n                description: el.description,\n                deadline: el.deadline,\n                completed: el.completed,\n                startDate: el.startDate\n            }\n            return (\n                <Task\n                    key={el.id}\n                    taskId={el.id}\n                    status={el.status}\n                    title={el.title}\n                    todoListId={props.todoListId}\n                    taskForUpdateParam={taskForUpdateParam}\n                />\n            )\n        }\n    )\n    //Filter\n    const filteredTasks = useCallback((val: FilterTasksType) => {\n        dispatch(filterTodoListAC(val, props.todoListId))\n    }, [dispatch, props.todoListId])\n    //Callback To addTask\n    const addTask = useCallback((title: string) => {\n        // dispatch(addTaskAC(text, props.todoListId))\n        dispatch(createTaskTC(props.todoListId, title))\n    }, [dispatch, props.todoListId])\n\n    //TodoList Title Change\n    const changeTodoListTitle = useCallback((title: string) => {\n        dispatch(changeTodosTitleTC(props.todoListId, title))\n    }, [dispatch, props.todoListId])\n\n    //Remove TodoList\n    const removeTodoList = () => {\n        dispatch(deleteTodosTC(props.todoListId))\n    }\n\n    return (\n\n        <Paper sx={{padding: \"10px 20px 20px 20px\"}}>\n            {/*RemoveTask*/}\n            <IconButton onClick={removeTodoList}\n                        sx={{\n                            margin: \"0\",\n                            padding: \"0\",\n                            position: \"relative\",\n                            left: \"230px\",\n                        }}\n                        disabled={props.entityStatus === \"loading\"}\n            >\n                <Clear/>\n            </IconButton>\n            {/*Title*/}\n            <EditableSpan textStyle={\"h6\"} title={props.title} callBack={changeTodoListTitle}/>\n\n            <AddItemForm addItem={addTask} disabled={props.entityStatus === \"loading\"}/>\n            {/*Tasks List*/}\n            <List>\n                {arrayOfTasksLi}\n            </List>\n            {/*Filter Buttons*/}\n            <ButtonFilterLine filter={props.filter} filteredTasks={filteredTasks}/>\n\n        </Paper>\n\n    );\n})\n\n","import React from \"react\"\nimport {AppBar, Button, IconButton, Toolbar, Typography} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\n\nexport const Header = () => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar style={{justifyContent: \"space-between\"}}>\n                <IconButton edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                >\n                    <Menu/>\n                </IconButton>\n                <Typography variant=\"h6\" component={\"span\"}>\n                    TodoLists\n                </Typography>\n                <Button color=\"inherit\"\n                        variant={\"outlined\"}\n                >\n                    Login\n                </Button>\n            </Toolbar>\n        </AppBar>\n    )\n}","import React from \"react\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert, {AlertProps} from \"@mui/material/Alert\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../bll/store\";\nimport {setErrorAC} from \"../../../bll/reducers/AppReducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n\nexport const ErrorSnackbar = () => {\n\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setErrorAC(null))\n    };\n\n    return (\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n                    {error}\n                </Alert>\n            </Snackbar>\n    );\n}\n","import React, {useCallback, useEffect} from \"react\";\nimport \"./App.css\";\nimport {TodoList} from \"./components/TodoList/TodoList\";\nimport {AddItemForm} from \"./components/DefaultComponent/Input/AddItemForm\";\nimport {Container, Grid, LinearProgress} from \"@mui/material\";\nimport {createTodosTC, setTodosTC, TodoListDomainType} from \"./bll/reducers/TodoListReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./bll/store\";\nimport {Header} from \"./components/Header/Header\";\nimport {TasksStateType} from \"./bll/reducers/TaskReducer\";\nimport {RequestStatusType} from \"./bll/reducers/AppReducer\";\nimport {ErrorSnackbar} from \"./components/DefaultComponent/ErrorSnackbar/errorSnackBar\";\n\n\nexport const AppWithRedux = () => {\n\n    const dispatch = useDispatch()\n    //Get data from state\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n\n    //AddToDoList\n    const addToDoList = useCallback((title: string) => {\n        dispatch(createTodosTC(title))\n    }, [dispatch])\n\n\n    const todoListsComponents = todoLists.map(tl => {\n        return (\n            <Grid item key={tl.id}>\n                <TodoList todoListId={tl.id}\n                          entityStatus={tl.entityStatus}\n                          title={tl.title}\n                          tasks={tasks[tl.id]}\n                          filter={tl.filter}\n                />\n            </Grid>\n        )\n    })\n\n    useEffect(() => {\n        dispatch(setTodosTC())\n    }, [dispatch])\n\n\n    //less15\n    const loadingStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n    console.log(loadingStatus)\n\n\n    return (\n        <>\n            {/*Header*/}\n            <Header/>\n\n            {loadingStatus === \"loading\" && <LinearProgress/>}\n\n\n            {/*Main*/}\n            <Container fixed>\n                {/*Add TodoList*/}\n                <Grid container sx={{padding: \"10px 0 10px \"}}>\n                    <AddItemForm addItem={addToDoList}/>\n                </Grid>\n                {/*TodoLists*/}\n                <Grid container spacing={5}>\n                    {todoListsComponents}\n                </Grid>\n            </Container>\n\n\n            <ErrorSnackbar/>\n        </>\n    );\n}\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport {tasksReducer} from \"./reducers/TaskReducer\";\nimport {todoListReducer} from \"./reducers/TodoListReducer\";\nimport thunk from 'redux-thunk'\nimport {appReducer} from \"./reducers/AppReducer\";\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todoLists: todoListReducer,\n    app: appReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {AppWithRedux} from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cont\":\"AddItemForm_cont__2d2zE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanStyle\":\"EditableSpan_spanStyle__3vl5L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TodoList_container__2qDxQ\",\"isDone\":\"TodoList_isDone__2QLv_\"};"],"sourceRoot":""}