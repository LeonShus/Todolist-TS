{"version":3,"sources":["components/DefaultComponent/Input/AddItemForm.module.css","components/DefaultComponent/Span/EditableSpan.module.css","components/TodoList/TodoList.module.css","serviceWorker.ts","api/todolistApi.ts","bll/reducers/AppReducer.ts","bll/reducers/TaskReducer.ts","utils/error-utils.ts","bll/reducers/TodoListReducer.ts","bll/reducers/AuthReducer.ts","components/Header/Header.tsx","components/DefaultComponent/ErrorSnackbar/errorSnackBar.tsx","features/login/login.tsx","components/DefaultComponent/Input/AddItemForm.tsx","components/DefaultComponent/Span/EditableSpan.tsx","components/TodoList/Tasks/Task.tsx","components/DefaultComponent/ButtonFilterLine/ButtonFilterLine.tsx","components/TodoList/TodoList.tsx","components/TodoLists/TodoLists.tsx","AppWithRedux.tsx","bll/store.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","RequestResultCode","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setLoadingBarStatusAC","state","action","payload","setErrorAC","isInitializedAC","appReducer","reducer","actions","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","put","taskId","param","authApi","data","TaskStatuses","TaskPriorities","handleServerAppError","dispatch","messages","length","addTodolistAC","todo","todos","filter","entityStatus","unshift","removeTodoListAC","index","findIndex","el","id","todoListId","splice","changeTodoListTitleAC","filterTodoListAC","setTodoListsAC","map","changeTodoListEntityStatusAC","todoListReducer","isLoggedIn","setIsLoggedInAC","value","authReducer","Header","useDispatch","useSelector","auth","AppBar","position","Toolbar","style","justifyContent","IconButton","edge","color","aria-label","Menu","Typography","variant","component","Button","onClick","then","res","resultCode","complete","catch","massage","finally","Alert","React","forwardRef","props","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validationSchema","Yup","required","min","onSubmit","values","resetForm","to","Grid","container","item","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","errors","type","FormControlLabel","control","Checkbox","AddItemForm","memo","useState","newTitleText","setNewTitleText","errorFil","setErrorFil","addItem","trim","className","classes","cont","onKeyPress","e","key","onChange","currentTarget","helperText","minWidth","disabled","Add","EditableSpan","callBack","textStyle","titleText","setTitleText","editMode","setEditMode","changeItemTitle","autoFocus","onBlur","spanStyle","onDoubleClick","flexGrow","addTaskAC","task","removeTaskAC","tasks","upgradeTaskAC","setTasksAC","extraReducers","forEach","tasksReducer","upgradeTaskTC","Task","ListItem","disablePadding","divider","pl","checked","Completed","New","taskForUpdateParam","Delete","ButtonFilterLine","filteredTasks","ButtonGroup","size","TodoList","useEffect","items","tasksToRender","arrayOfTasksLi","priority","description","deadline","completed","startDate","useCallback","val","addTask","createTaskTC","changeTodoListTitle","changeTodosTitleTC","Paper","padding","left","Clear","List","TodoLists","todoLists","addToDoList","createTodosTC","todoListsComponents","tl","Container","fixed","spacing","AppWithRedux","loadingStatus","LinearProgress","path","element","top","textAlign","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7b7288a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cont\":\"AddItemForm_cont__2d2zE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spanStyle\":\"EditableSpan_spanStyle__3vl5L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TodoList_container__2qDxQ\",\"isDone\":\"TodoList_isDone__2QLv_\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. AppWithReducer is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\nimport {TodoListType} from \"../bll/reducers/TodoListReducer\";\nimport {TaskPriorities, TaskStatuses, TasksType} from \"../bll/reducers/TaskReducer\";\nimport {AuthDataType} from \"../bll/reducers/AuthReducer\";\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    withCredentials: true,\n    headers: {\n        \"API-KEY\": \"099be23b-024b-4d04-8aea-ded1a22de046\"\n    }\n})\nexport const todolistApi = {\n    //Todos\n    getTodos() {\n        return instance.get<Array<TodoListType>>(\"todo-lists\",)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{ item: TodoListType }>>(\"todo-lists\", {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n    },\n    updateTodolistTitle(todolistId: string, title: string) {\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title})\n    },\n    //Tasks\n    getTasks(todolistId: string) {\n        return instance.get<TasksResponseType<Array<TasksType>>>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{ item: TasksType }>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    upgradeTask(todolistId: string, taskId: string, param: UpdateTaskParamType) {\n        return instance.put<ResponseType<{ item: TasksType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, param)\n    }\n}\n\nexport const authApi = {\n    login(data: AuthDataType){\n        return instance.post<Omit<ResponseType<{userId: number}>, \"fieldsErrors\" | \"order\">>(`auth/login`, data)\n    },\n    authMe(){\n        return instance.get<Omit<ResponseType<{id: number, email: string, login: string}>, \"order\">>(`auth/me`)\n    },\n    logOut(){\n        return instance.delete<Omit<ResponseType<{}>, \"fieldsErrors\" | \"order\">>(`auth/login`)\n    }\n}\n\n\nexport type ResponseType<T> = {\n    fieldsErrors: Array<string>\n    messages: Array<string>\n    order?: number\n    resultCode?: number\n    data: T\n}\n\ntype TasksResponseType<T> = {\n    error: any\n    totalCount: number\n    items: T\n}\n\nexport type UpdateTaskParamType = {\n    title: string\n    description: string\n    completed: boolean\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\nexport enum RequestResultCode {\n    complete,\n    error,\n    captcha = 10\n}","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\n\nconst initialState = {\n    status: \"idle\" as RequestStatusType,\n    error: null as string | null,\n    isInitialized: false\n}\n\ntype InitialStateType = typeof initialState\n\nconst slice = createSlice({\n    name: \"app\",\n    initialState,\n    reducers: {\n        setLoadingBarStatusAC(state: InitialStateType, action: PayloadAction<{ status: RequestStatusType }>) {\n            state.status = action.payload.status\n        },\n        setErrorAC(state: InitialStateType, action: PayloadAction<{ error: string | null }>) {\n            state.error = action.payload.error\n        },\n        isInitializedAC(state: InitialStateType, action: PayloadAction<{ isInitialized: boolean }>) {\n            state.isInitialized = action.payload.isInitialized\n        }\n    }\n})\n\nexport const appReducer = slice.reducer\n\nexport const {setLoadingBarStatusAC, setErrorAC, isInitializedAC} = slice.actions\n","import {\n    addTodolistAC,\n    changeTodoListEntityStatusAC,\n    removeTodoListAC,\n    setTodoListsAC,\n    TodoListType,\n} from \"./TodoListReducer\";\nimport {Dispatch} from \"redux\";\nimport {RequestResultCode, todolistApi, UpdateTaskParamType} from \"../../api/todolistApi\";\nimport {handleServerAppError} from \"../../utils/error-utils\";\nimport {setErrorAC, setLoadingBarStatusAC} from \"./AppReducer\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress,\n    Completed,\n    Draft\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle,\n    Hi,\n    Urgent,\n    Later\n}\n\nexport type TasksType = {\n    description: string\n    title: string\n    completed: boolean\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TasksType>\n}\n\nconst initialState: TasksStateType = {}\n\nconst slice = createSlice({\n    name: \"tasks\",\n    initialState,\n    reducers: {\n        addTaskAC(state: TasksStateType, action: PayloadAction<{ todoListId: string, task: TasksType }>) {\n            state[action.payload.todoListId].unshift(action.payload.task)\n        },\n        removeTaskAC(state: TasksStateType, action: PayloadAction<{ todoListId: string, taskId: string }>) {\n            let tasks = state[action.payload.todoListId]\n            let index = tasks.findIndex(el => el.id === action.payload.taskId)\n            if (index > -1) {\n                tasks.splice(index, 1)\n            }\n        },\n        upgradeTaskAC(state: TasksStateType, action: PayloadAction<{ task: TasksType }>) {\n            let tasks = state[action.payload.task.todoListId]\n            let index = tasks.findIndex(el => el.id === action.payload.task.id)\n            if (index > -1) {\n                tasks[index] = action.payload.task\n            }\n        },\n        setTasksAC(state: TasksStateType, action: PayloadAction<{ todoListId: string, tasks: TasksType[] }>) {\n            state[action.payload.todoListId] = action.payload.tasks\n        }\n    },\n    extraReducers: {\n        [addTodolistAC.type]: (state: TasksStateType, action: PayloadAction<{ todos: TodoListType }>) => {\n            state[action.payload.todos.id] = []\n        },\n        [removeTodoListAC.type]: (state: TasksStateType, action: PayloadAction<{ todoListId: string }>) => {\n            delete state[action.payload.todoListId]\n        },\n        [setTodoListsAC.type]: (state: TasksStateType, action: PayloadAction<{ todos: TodoListType[] }>) => {\n            action.payload.todos.forEach(el => {\n                state[el.id] = []\n            })\n        },\n\n    }\n})\n\nexport const tasksReducer = slice.reducer\n\nexport const {addTaskAC, removeTaskAC, upgradeTaskAC, setTasksAC} = slice.actions\n\n\n//THUNK\n\n\nexport const setTasksTC = (todoListId: string) => (dispatch: Dispatch) => {\n    dispatch(setLoadingBarStatusAC({status: \"loading\"}))\n\n    todolistApi.getTasks(todoListId)\n        .then(res => {\n            dispatch(setTasksAC({todoListId, tasks: res.data.items}))\n        })\n        .catch(error => {\n            dispatch(setErrorAC({error: error.massage}))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC({status: \"idle\"}))\n        })\n}\n\nexport const createTaskTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\n    dispatch(setLoadingBarStatusAC({status: \"loading\"}))\n    dispatch(changeTodoListEntityStatusAC({todoListId, entityStatus: \"loading\"}))\n\n    todolistApi.createTask(todoListId, title)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(addTaskAC({todoListId, task: res.data.data.item}))\n            } else {\n                handleServerAppError<{ item: TasksType }>(dispatch, res.data)\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC({error: error.massage}))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC({status: \"idle\"}))\n            dispatch(changeTodoListEntityStatusAC({todoListId, entityStatus: \"idle\"}))\n        })\n}\n\nexport const deleteTaskTC = (todoListId: string, taskId: string) => (dispatch: Dispatch) => {\n    dispatch(setLoadingBarStatusAC({status: \"loading\"}))\n    dispatch(changeTodoListEntityStatusAC({todoListId, entityStatus: \"loading\"}))\n\n    todolistApi.deleteTask(todoListId, taskId)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(removeTaskAC({todoListId, taskId}))\n            } else {\n                handleServerAppError(dispatch, res.data)\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC({error: error.massage}))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC({status: \"idle\"}))\n            dispatch(changeTodoListEntityStatusAC({todoListId, entityStatus: \"idle\"}))\n        })\n}\n\nexport const upgradeTaskTC = (todolistId: string, taskId: string, param: UpdateTaskParamType) => (dispatch: Dispatch) => {\n    dispatch(setLoadingBarStatusAC({status: \"loading\"}))\n    todolistApi.upgradeTask(todolistId, taskId, param)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(upgradeTaskAC({task: res.data.data.item}))\n            } else {\n                handleServerAppError<{ item: TasksType }>(dispatch, res.data)\n            }\n\n        })\n        .catch(error => {\n            dispatch(setErrorAC({error: error.massage}))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC({status: \"idle\"}))\n        })\n}","import {setErrorAC} from \"../bll/reducers/AppReducer\";\nimport {Dispatch} from \"redux\";\nimport {ResponseType} from \"../api/todolistApi\";\n\n\nexport const handleServerAppError = <T>(dispatch: Dispatch, data: ResponseType<T>) => {\n    if (data.messages.length) {\n        dispatch(setErrorAC({error: data.messages[0]}))\n    } else {\n        dispatch(setErrorAC({error: \"Some error occured\"}))\n    }\n}","import {Dispatch} from \"redux\";\nimport {RequestResultCode, todolistApi} from \"../../api/todolistApi\";\nimport {RequestStatusType, setErrorAC, setLoadingBarStatusAC} from \"./AppReducer\";\nimport {handleServerAppError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nexport type TodoListType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\n\nexport type FilterTasksType = \"all\" | \"active\" | \"completed\"\n\nexport type TodoListDomainType = TodoListType & {\n    filter: FilterTasksType\n    entityStatus: RequestStatusType\n}\n\nconst initialState: Array<TodoListDomainType> = []\n\n\nexport const slice = createSlice({\n    name: \"todoLists\",\n    initialState,\n    reducers: {\n        addTodolistAC(state: Array<TodoListDomainType>, action: PayloadAction<{ todos: TodoListType }>) {\n            let todo: TodoListDomainType = {...action.payload.todos, filter: \"all\", entityStatus: \"idle\"}\n            state.unshift(todo)\n        },\n        removeTodoListAC(state: Array<TodoListDomainType>, action: PayloadAction<{ todoListId: string }>) {\n            let index = state.findIndex(el => el.id === action.payload.todoListId)\n            if (index > -1) {\n                state.splice(index, 1)\n            }\n        },\n        changeTodoListTitleAC(state: Array<TodoListDomainType>, action: PayloadAction<{ todoListId: string, title: string }>) {\n            let index = state.findIndex(el => el.id === action.payload.todoListId)\n            if (index > -1) {\n                state[index].title = action.payload.title\n            }\n        },\n        filterTodoListAC(state: Array<TodoListDomainType>, action: PayloadAction<{ filter: FilterTasksType, id: string }>) {\n            let index = state.findIndex(el => el.id === action.payload.id)\n            if (index > -1) {\n                state[index].filter = action.payload.filter\n            }\n        },\n        setTodoListsAC(state: Array<TodoListDomainType>, action: PayloadAction<{ todos: TodoListType[] }>) {\n            let todos: TodoListDomainType[] = action.payload.todos.map(el => ({\n                ...el,\n                filter: \"all\",\n                entityStatus: \"idle\"\n            }))\n            return state = todos\n        },\n        changeTodoListEntityStatusAC(state: Array<TodoListDomainType>, action: PayloadAction<{ todoListId: string, entityStatus: RequestStatusType }>) {\n            let index = state.findIndex(el => el.id === action.payload.todoListId)\n            if (index > -1) {\n                state[index].entityStatus = action.payload.entityStatus\n            }\n        },\n    }\n})\n\nexport const todoListReducer = slice.reducer\n\nexport const {\n    addTodolistAC,\n    removeTodoListAC,\n    changeTodoListTitleAC,\n    filterTodoListAC,\n    setTodoListsAC,\n    changeTodoListEntityStatusAC\n} = slice.actions\n\n//THUNK\n\nexport const setTodosTC = () => (dispatch: Dispatch) => {\n    dispatch(setLoadingBarStatusAC({status: \"loading\"}))\n    todolistApi.getTodos()\n        .then(res => {\n            dispatch(setTodoListsAC({todos: res.data}))\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC({status: \"idle\"}))\n        })\n}\n\nexport const createTodosTC = (title: string) => (dispatch: Dispatch) => {\n    dispatch(setLoadingBarStatusAC({status: \"loading\"}))\n\n    todolistApi.createTodolist(title)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(addTodolistAC({todos: res.data.data.item}))\n            } else {\n                handleServerAppError<{ item: TodoListType }>(dispatch, res.data)\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC({status: \"idle\"}))\n        })\n}\n\nexport const deleteTodosTC = (todoListId: string) => (dispatch: Dispatch) => {\n    dispatch(setLoadingBarStatusAC({status: \"loading\"}))\n    dispatch(changeTodoListEntityStatusAC({todoListId, entityStatus: \"loading\"}))\n\n    todolistApi.deleteTodolist(todoListId)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(removeTodoListAC({todoListId}))\n                dispatch(changeTodoListEntityStatusAC({todoListId, entityStatus: \"idle\"}))\n            } else {\n                handleServerAppError(dispatch, res.data)\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC({status: \"idle\"}))\n        })\n}\n\nexport const changeTodosTitleTC = (todoListId: string, title: string) => (dispatch: Dispatch) => {\n    dispatch(setLoadingBarStatusAC({status: \"loading\"}))\n    todolistApi.updateTodolistTitle(todoListId, title)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(changeTodoListTitleAC({todoListId, title}))\n            } else {\n                handleServerAppError(dispatch, res.data)\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC({status: \"idle\"}))\n        })\n}\n\n","import {Dispatch} from \"redux\"\nimport {isInitializedAC, setErrorAC, setLoadingBarStatusAC} from \"./AppReducer\";\nimport {authApi, RequestResultCode} from \"../../api/todolistApi\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {setTodoListsAC} from \"./TodoListReducer\";\n\n\nconst initialState = {\n    isLoggedIn: false\n}\n\nconst slice = createSlice({\n    name: \"auth\",\n    initialState,\n    reducers: {\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\n            state.isLoggedIn = action.payload.value\n        }\n    }\n})\n\nexport const authReducer = slice.reducer\n\nexport const {setIsLoggedInAC} = slice.actions\n\n\n// thunks\nexport const loginTC = (data: AuthDataType) => (dispatch: Dispatch) => {\n    dispatch(setLoadingBarStatusAC({status: \"loading\"}))\n    authApi.login(data)\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(setIsLoggedInAC({value: true}))\n            } else {\n                if (res.data.messages.length) {\n                    dispatch(setErrorAC({error: res.data.messages[0]}))\n                } else {\n                    dispatch(setErrorAC({error: \"Some error occured\"}))\n                }\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC({status: \"idle\"}))\n        })\n}\n\nexport const authMe = () => (dispatch: Dispatch) => {\n    dispatch(setLoadingBarStatusAC({status: \"loading\"}))\n    authApi.authMe()\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(setIsLoggedInAC({value: true}))\n                dispatch(isInitializedAC({isInitialized: true}))\n            } else {\n                dispatch(isInitializedAC({isInitialized: true}))\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC({status: \"idle\"}))\n        })\n}\n\nexport const logOut = () => (dispatch: Dispatch) => {\n    dispatch(setLoadingBarStatusAC({status: \"loading\"}))\n    authApi.logOut()\n        .then(res => {\n            if (res.data.resultCode === RequestResultCode.complete) {\n                dispatch(setIsLoggedInAC({value: false}))\n\n\n                dispatch(setTodoListsAC({todos: []}))\n            } else {\n                if (res.data.messages.length) {\n                    dispatch(setErrorAC({error: res.data.messages[0]}))\n                } else {\n                    dispatch(setErrorAC({error: \"Some error occured\"}))\n                }\n            }\n        })\n        .catch(error => {\n            dispatch(setErrorAC(error.massage))\n        })\n        .finally(() => {\n            dispatch(setLoadingBarStatusAC({status: \"idle\"}))\n        })\n}\n\n// types\n\nexport type AuthDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}","import React from \"react\"\nimport {AppBar, Button, IconButton, Toolbar, Typography} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logOut} from \"../../bll/reducers/AuthReducer\";\nimport {AppRootStateType} from \"../../bll/store\";\n\nexport const Header = () => {\n\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const logOutHandler = () => {\n        dispatch(logOut())\n    }\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar style={{justifyContent: \"space-between\"}}>\n                <IconButton edge=\"start\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                >\n                    <Menu/>\n                </IconButton>\n                <Typography variant=\"h6\" component={\"span\"}>\n                    TodoLists\n                </Typography>\n                {isLoggedIn\n                    ? <Button color=\"inherit\"\n                              variant={\"outlined\"}\n                              onClick={logOutHandler}\n                    >\n                        LogOut\n                    </Button>\n                    : <Button color=\"inherit\"\n                              variant={\"outlined\"}\n                    >\n                        Login\n                    </Button>\n                }\n\n\n            </Toolbar>\n        </AppBar>\n    )\n}","import React from \"react\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert, {AlertProps} from \"@mui/material/Alert\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../bll/store\";\nimport {setErrorAC} from \"../../../bll/reducers/AppReducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n\nexport const ErrorSnackbar = () => {\n\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === \"clickaway\") {\n            return;\n        }\n        dispatch(setErrorAC({error: null}))\n    };\n\n    return (\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: \"100%\"}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import React from \"react\"\nimport Grid from \"@mui/material/Grid\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\nimport {useFormik} from \"formik\";\nimport * as Yup from \"yup\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"../../bll/reducers/AuthReducer\";\nimport {AppRootStateType} from \"../../bll/store\";\nimport {Navigate} from \"react-router-dom\";\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: \"free@samuraijs.com\",\n            password: \"free\",\n            rememberMe: false\n        },\n        validationSchema: Yup.object({\n            email: Yup.string()\n                .email(\"Invalid email address\").required(\"Required\"),\n            password: Yup.string()\n                .min(3, \"Min size 6 char\").required(\"Required\")\n        }),\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm()\n        }\n    })\n\n    if (isLoggedIn) {\n        return <Navigate to={\"/to-do-lists\"}/>\n    }\n\n    return <Grid container justifyContent={\"center\"}>\n        <Grid item justifyContent={\"center\"}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered\n                        <a href={\"https://social-network.samuraijs.com/\"}\n                           target={\"_blank\"}> here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormGroup>\n                        <TextField label=\"Email\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps(\"email\")}\n\n                        />\n                        {formik.touched.email && formik.errors.email &&\n                        <div>{formik.errors.email}</div>\n                        }\n                        <TextField type=\"password\"\n                                   label=\"Password\"\n                                   margin=\"normal\"\n                                   {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.touched.password && formik.errors.password &&\n                        <div>{formik.errors.password}</div>\n                        }\n                        <FormControlLabel label={\"Remember me\"}\n                                          control={<Checkbox/>}\n                                          {...formik.getFieldProps(\"rememberMe\")}\n                        />\n                        <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </form>\n            </FormControl>\n        </Grid>\n    </Grid>\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport classes from './AddItemForm.module.css'\nimport {IconButton, TextField} from \"@mui/material\";\nimport {Add} from \"@mui/icons-material\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n\n    let [newTitleText, setNewTitleText] = useState<string>(\"\")\n    let [errorFil, setErrorFil] = useState(\"\")\n\n    const changeTitleVal = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewTitleText(e.currentTarget.value)\n        setErrorFil(\"\")\n    }\n\n    const addItem = () => {\n        if (newTitleText.trim()) {\n            props.addItem(newTitleText.trim())\n            setNewTitleText(\"\")\n            setErrorFil(\"\")\n        } else {\n            setErrorFil(\"Incorrect value\")\n            return\n        }\n    }\n\n    const keyAdd = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            addItem()\n        }\n    }\n\n    return (\n        <div className={classes.cont}>\n            <TextField variant={\"standard\"}\n                       onKeyPress={keyAdd}\n                       onChange={changeTitleVal}\n                       value={newTitleText}\n                       error={!!errorFil}\n                       helperText={errorFil}\n                       sx={{ minWidth: \"198px\"}}\n            />\n            <IconButton onClick={addItem} color={\"primary\"} disabled={props.disabled}>\n                <Add/>\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\nimport classes from \"./EditableSpan.module.css\"\nimport {TextField, Typography} from \"@mui/material\";\n\ntype textStyleType =\n    \"h1\"\n    | \"h2\"\n    | \"h3\"\n    | \"h4\"\n    | \"h5\"\n    | \"h6\"\n    | \"subtitle1\"\n    | \"subtitle2\"\n    | \"body1\"\n    | \"body2\"\n    | \"caption\"\n    | \"button\"\n    | \"overline\"\n    | \"inherit\"\n    | undefined\n\ntype EditableSpanPropsType = {\n    title: string\n    callBack: (title: string) => void\n    textStyle?: textStyleType\n}\n\nexport const EditableSpan = React.memo(({title, callBack, textStyle}: EditableSpanPropsType) => {\n\n    let [titleText, setTitleText] = useState<string>(title)\n    const changeTitleVal = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitleText(e.currentTarget.value)\n    }\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => setEditMode(false)\n\n    const changeItemTitle = () => {\n        callBack(titleText)\n        offEditMode()\n    }\n    const keyAdd = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === \"Enter\") {\n            changeItemTitle()\n        }\n    }\n    return (\n        <>\n            {!editMode\n                ? <Typography\n                    variant={textStyle}\n                    component={\"span\"}\n                    className={classes.spanStyle}\n                    onDoubleClick={onEditMode}\n                    sx={{flexGrow: 1}}\n                >\n                   {title}\n                </Typography>\n                : <TextField autoFocus\n                             variant={\"standard\"}\n                             onKeyPress={keyAdd}\n                             onChange={changeTitleVal}\n                             onBlur={changeItemTitle} type=\"text\"\n                             value={titleText}/>\n            }\n        </>\n    )\n})\n\n","import React, {ChangeEvent} from \"react\"\nimport {Checkbox, IconButton, ListItem} from \"@mui/material\";\nimport classes from \"../TodoList.module.css\";\nimport {EditableSpan} from \"../../DefaultComponent/Span/EditableSpan\";\nimport {Delete} from \"@mui/icons-material\";\nimport {useDispatch} from \"react-redux\";\nimport {deleteTaskTC, TaskStatuses, upgradeTaskTC} from \"../../../bll/reducers/TaskReducer\";\nimport {UpdateTaskParamType} from \"../../../api/todolistApi\";\n\ntype TasksPropsType = {\n    taskId: string\n    todoListId: string\n    status: TaskStatuses\n    title: string\n    taskForUpdateParam: UpdateTaskParamType\n}\n\nexport const Task = React.memo((props: TasksPropsType) => {\n\n    const dispatch = useDispatch()\n\n    const removeTask = () => dispatch(deleteTaskTC(props.todoListId, props.taskId))\n\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        let checked = e.currentTarget.checked\n        let status = checked ? TaskStatuses.Completed : TaskStatuses.New\n        dispatch(upgradeTaskTC(props.todoListId, props.taskId, {...props.taskForUpdateParam, status}))\n    }\n\n    const changeTaskTitle = (title: string) => {\n        dispatch(upgradeTaskTC(props.todoListId, props.taskId, {...props.taskForUpdateParam, title}))\n    }\n    return (\n        // Task\n        <ListItem key={props.taskId}\n                  className={`${props.status ? classes.status : \"\"}`}\n                  disablePadding\n                  divider\n                  sx={{pl: \"16px\"}}\n        >\n\n            <Checkbox onChange={changeTaskStatus}\n                      checked={props.status === TaskStatuses.Completed}\n            />\n            <EditableSpan title={props.title} callBack={changeTaskTitle}/>\n            <IconButton onClick={removeTask}>\n                <Delete/>\n            </IconButton>\n        </ListItem>\n    )\n})","import React from \"react\";\nimport {Button, ButtonGroup} from \"@mui/material\";\nimport {FilterTasksType} from \"../../../bll/reducers/TodoListReducer\";\n\n\ntype ButtonFilterLine = {\n    filter: FilterTasksType\n    filteredTasks: (val: FilterTasksType) => void\n}\n\nexport const ButtonFilterLine = React.memo(({filter, filteredTasks}: ButtonFilterLine) => {\n\n\n    return (\n\n        <ButtonGroup size={\"small\"} variant={\"outlined\"}>\n            <Button\n                color={filter === \"all\" ? \"secondary\" : \"primary\"}\n                onClick={() => filteredTasks(\"all\")}\n            >\n                All\n            </Button>\n            <Button\n                color={filter === \"active\" ? \"secondary\" : \"primary\"}\n                onClick={() => filteredTasks(\"active\")}\n            >\n                Active\n            </Button>\n            <Button\n                color={filter === \"completed\" ? \"secondary\" : \"primary\"}\n                onClick={() => filteredTasks(\"completed\")}\n            >\n                Completed\n            </Button>\n        </ButtonGroup>\n    );\n})\n","import React, {useCallback, useEffect} from \"react\";\nimport {AddItemForm} from \"../DefaultComponent/Input/AddItemForm\";\nimport {EditableSpan} from \"../DefaultComponent/Span/EditableSpan\";\nimport {IconButton, List, Paper} from \"@mui/material\";\nimport {Clear} from \"@mui/icons-material\";\nimport {Task} from \"./Tasks/Task\";\nimport {useDispatch} from \"react-redux\";\nimport {\n    changeTodosTitleTC,\n    deleteTodosTC,\n    FilterTasksType,\n    filterTodoListAC,\n} from \"../../bll/reducers/TodoListReducer\";\nimport {createTaskTC, setTasksTC, TaskStatuses, TasksType} from \"../../bll/reducers/TaskReducer\";\nimport {ButtonFilterLine} from \"../DefaultComponent/ButtonFilterLine/ButtonFilterLine\";\nimport {UpdateTaskParamType} from \"../../api/todolistApi\";\nimport {RequestStatusType} from \"../../bll/reducers/AppReducer\";\n\n\ntype TodoListPropsType = {\n    todoListId: string\n    title: string\n    tasks: Array<TasksType>\n    filter: FilterTasksType\n    entityStatus: RequestStatusType\n}\n\nexport const TodoList = React.memo((props: TodoListPropsType) => {\n\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setTasksTC(props.todoListId))\n    }, [dispatch, props.todoListId])\n\n    //Filter tasks\n    let tasksToRender = props.tasks\n    if (props.filter === \"active\") {\n        tasksToRender = props.tasks.filter(el => el.status === TaskStatuses.New)\n    }\n    if (props.filter === \"completed\") {\n        tasksToRender = props.tasks.filter(el => el.status === TaskStatuses.Completed)\n    }\n    //Do Array of jsx Elements TASKS ITEM\n    const arrayOfTasksLi = tasksToRender.map(el => {\n            //Task Param to Update\n            let taskForUpdateParam: UpdateTaskParamType = {\n                title: el.title,\n                status: el.status,\n                priority: el.priority,\n                description: el.description,\n                deadline: el.deadline,\n                completed: el.completed,\n                startDate: el.startDate\n            }\n            return (\n                <Task\n                    key={el.id}\n                    taskId={el.id}\n                    status={el.status}\n                    title={el.title}\n                    todoListId={props.todoListId}\n                    taskForUpdateParam={taskForUpdateParam}\n                />\n            )\n        }\n    )\n    //Filter\n    const filteredTasks = useCallback((val: FilterTasksType) => {\n        dispatch(filterTodoListAC({filter: val, id: props.todoListId}))\n    }, [dispatch, props.todoListId])\n    //Callback To addTask\n    const addTask = useCallback((title: string) => {\n        // dispatch(addTaskAC(text, props.todoListId))\n        dispatch(createTaskTC(props.todoListId, title))\n    }, [dispatch, props.todoListId])\n\n    //TodoList Title Change\n    const changeTodoListTitle = useCallback((title: string) => {\n        dispatch(changeTodosTitleTC(props.todoListId, title))\n    }, [dispatch, props.todoListId])\n\n    //Remove TodoList\n    const removeTodoList = () => {\n        dispatch(deleteTodosTC(props.todoListId))\n    }\n\n    return (\n\n        <Paper sx={{padding: \"10px 20px 20px 20px\"}}>\n            {/*RemoveTask*/}\n            <IconButton onClick={removeTodoList}\n                        sx={{\n                            margin: \"0\",\n                            padding: \"0\",\n                            position: \"relative\",\n                            left: \"230px\",\n                        }}\n                        disabled={props.entityStatus === \"loading\"}\n            >\n                <Clear/>\n            </IconButton>\n            {/*Title*/}\n            <EditableSpan textStyle={\"h6\"} title={props.title} callBack={changeTodoListTitle}/>\n\n            <AddItemForm addItem={addTask} disabled={props.entityStatus === \"loading\"}/>\n            {/*Tasks List*/}\n            <List>\n                {arrayOfTasksLi}\n            </List>\n            {/*Filter Buttons*/}\n            <ButtonFilterLine filter={props.filter} filteredTasks={filteredTasks}/>\n\n        </Paper>\n\n    );\n})\n\n","import React, {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {TasksStateType} from \"../../bll/reducers/TaskReducer\";\nimport {createTodosTC, setTodosTC, TodoListDomainType} from \"../../bll/reducers/TodoListReducer\";\nimport {AppRootStateType} from \"../../bll/store\";\n// import {RequestStatusType} from \"../../bll/reducers/AppReducer\";\nimport Grid from \"@mui/material/Grid\";\nimport {AddItemForm} from \"../DefaultComponent/Input/AddItemForm\";\nimport {Container} from \"@mui/material\";\nimport {TodoList} from \"../TodoList/TodoList\";\nimport {Navigate} from \"react-router-dom\";\n\n\nexport const TodoLists = React.memo(() => {\n\n    const dispatch = useDispatch()\n    //Get data from state\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    //AddToDoList\n    const addToDoList = useCallback((title: string) => {\n        dispatch(createTodosTC(title))\n    }, [dispatch])\n\n\n    const todoListsComponents = todoLists.map(tl => {\n        return (\n            <Grid item key={tl.id}>\n                <TodoList todoListId={tl.id}\n                          entityStatus={tl.entityStatus}\n                          title={tl.title}\n                          tasks={tasks[tl.id]}\n                          filter={tl.filter}\n                />\n            </Grid>\n        )\n    })\n\n    useEffect(() => {\n        dispatch(setTodosTC())\n    }, [dispatch])\n\n\n    //less15\n    // const loadingStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n\n    if (!isLoggedIn) {\n        return (\n            <Navigate to={\"/login\"}/>\n        )\n    }\n\n    return (\n        <>\n            <Container fixed>\n                {/*Add TodoList*/}\n                <Grid container sx={{padding: \"10px 0 10px \"}}>\n                    <AddItemForm addItem={addToDoList}/>\n                </Grid>\n                {/*TodoLists*/}\n                <Grid container spacing={5}>\n                    {todoListsComponents}\n                </Grid>\n            </Container>\n        </>\n    );\n})\n\n","import React, {useEffect} from \"react\";\nimport \"./App.css\";\nimport {LinearProgress} from \"@mui/material\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./bll/store\";\nimport {Header} from \"./components/Header/Header\";\nimport {RequestStatusType} from \"./bll/reducers/AppReducer\";\nimport {ErrorSnackbar} from \"./components/DefaultComponent/ErrorSnackbar/errorSnackBar\";\nimport {Login} from \"./features/login/login\";\nimport {Navigate, Route, Routes} from \"react-router-dom\";\nimport {authMe} from \"./bll/reducers/AuthReducer\";\nimport { TodoLists } from \"./components/TodoLists/TodoLists\";\n\n\nexport const AppWithRedux = () => {\n\n    const dispatch = useDispatch()\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n    //Loading bar\n    const loadingStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n\n    useEffect(() => {\n        dispatch(authMe())\n    }, [dispatch])\n\n    if (!isInitialized) {\n        return <div\n            style={{position: \"fixed\", top: \"30%\", textAlign: \"center\", width: \"100%\"}}>\n            <LinearProgress/>\n        </div>\n    }\n\n    return (\n        <>\n            {/*Header*/}\n            <Header/>\n\n            {loadingStatus === \"loading\" && <LinearProgress/>}\n\n            <Routes>\n                <Route path={\"/\"} element={<Navigate to={\"/login\"}/>}/>\n                <Route path={\"to-do-lists\"} element={<TodoLists/>}/>\n                <Route path={\"login\"} element={<Login/>}/>\n                <Route path={\"404\"} element={<h1>404: PAGE NOT FOUND</h1>}/>\n                <Route path=\"*\" element={<Navigate to={\"/404\"}/>}/>\n            </Routes>\n\n            <ErrorSnackbar/>\n        </>\n    );\n}\n\n","import {combineReducers} from \"redux\";\nimport {tasksReducer} from \"./reducers/TaskReducer\";\nimport {todoListReducer} from \"./reducers/TodoListReducer\";\nimport thunk from \"redux-thunk\"\nimport {appReducer} from \"./reducers/AppReducer\";\nimport {authReducer} from \"./reducers/AuthReducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todoLists: todoListReducer,\n    app: appReducer,\n    auth: authReducer,\n})\n\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\n\n})\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {AppWithRedux} from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <AppWithRedux/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}